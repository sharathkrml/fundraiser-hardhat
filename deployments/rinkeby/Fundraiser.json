{
  "address": "0xeDCaA4e4155Daa1470D507Ce38F014dc17CCc1cE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Fundraiser__Completed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Fundraiser__DoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Fundraiser__DonatedZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Fundraiser__NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Fundraiser__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Fundraiser__OverPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Fundraiser__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Donation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "EndCampaign",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "extendAmt",
          "type": "uint256"
        }
      ],
      "name": "ExtendCampaign",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requiredAmt",
          "type": "uint256"
        }
      ],
      "name": "StartCampaign",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawedAmt",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "endCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "extendAmt",
          "type": "uint256"
        }
      ],
      "name": "extendCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCampaign",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currAmt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "requiredAmt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "completed",
              "type": "bool"
            }
          ],
          "internalType": "struct Fundraiser.Campaign",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_requiredAmt",
          "type": "uint256"
        }
      ],
      "name": "startCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe7f6f93af8ca17f193cdd112a0b65f07bb100807ee9d5d9d4735eebd22cf88cd",
  "receipt": {
    "to": null,
    "from": "0x14F605637700ae793E143C1Cd5b7e37F06EB9560",
    "contractAddress": "0xeDCaA4e4155Daa1470D507Ce38F014dc17CCc1cE",
    "transactionIndex": 28,
    "gasUsed": "2961887",
    "logsBloom": "0x
    "blockHash": "0xc1d41251c81c41e2a82554202080a4cc8399e09bb4fa86dc7a591eccfd1f5538",
    "transactionHash": "0xe7f6f93af8ca17f193cdd112a0b65f07bb100807ee9d5d9d4735eebd22cf88cd",
    "logs": [],
    "blockNumber": 11064237,
    "cumulativeGasUsed": "7425577",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "a575ca1156b210b3bd9dd1c599039f0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Fundraiser__Completed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fundraiser__DoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fundraiser__DonatedZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fundraiser__NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fundraiser__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fundraiser__OverPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fundraiser__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EndCampaign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extendAmt\",\"type\":\"uint256\"}],\"name\":\"ExtendCampaign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredAmt\",\"type\":\"uint256\"}],\"name\":\"StartCampaign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawedAmt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"endCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extendAmt\",\"type\":\"uint256\"}],\"name\":\"extendCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCampaign\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredAmt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"internalType\":\"struct Fundraiser.Campaign\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_requiredAmt\",\"type\":\"uint256\"}],\"name\":\"startCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Buildit Team\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"donate(uint256)\":{\"details\":\"adds up msg.value received to campaign\",\"params\":{\"tokenId\":\"used to identify campaign\"}},\"endCampaign(uint256)\":{\"details\":\"marks campaign as completed & sends amount to owner\",\"params\":{\"tokenId\":\"used to identify campaign\"}},\"extendCampaign(uint256,uint256)\":{\"details\":\"mints a Fundraiser NFT with given metadata & Stores requiredAmt to Struct mapped using tokenId\",\"params\":{\"extendAmt\":\"add extra amount to existing Campaign\",\"tokenId\":\"used to identify token\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getCampaign(uint256)\":{\"details\":\"identify Campaign from s_idToCampaign & return\",\"params\":{\"tokenId\":\"used to identify campaign\"}},\"getLastTokenId()\":{\"details\":\"returns s_tokenId private variable\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"startCampaign(string,uint256)\":{\"details\":\"mints a Fundraiser NFT with given metadata & Stores requiredAmt to Struct mapped using tokenId\",\"params\":{\"_requiredAmt\":\"the total required amount\",\"_tokenURI\":\"IPFS hash of metadata\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"withdraw(uint256,uint256)\":{\"details\":\"withdraw give amount,also reduce that from required & currAmt\",\"params\":{\"amount\":\"specify amount to withdraw\",\"tokenId\":\"used to identify campaign\"}}},\"title\":\"Fundraiser\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"donate(uint256)\":{\"notice\":\"Donate to a campaign\"},\"endCampaign(uint256)\":{\"notice\":\"end the campaign and withdraw all\"},\"extendCampaign(uint256,uint256)\":{\"notice\":\"Extends a campaign\"},\"getCampaign(uint256)\":{\"notice\":\"get Campaign details\"},\"getLastTokenId()\":{\"notice\":\"get last minted tokenId\"},\"startCampaign(string,uint256)\":{\"notice\":\"Starts a campaign\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw amount from campaign\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fundraiser.sol\":\"Fundraiser\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Fundraiser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nerror Fundraiser__DonatedZero();\\nerror Fundraiser__OverPayment();\\nerror Fundraiser__NotOwner();\\nerror Fundraiser__NotEnoughBalance();\\nerror Fundraiser__TransferFailed();\\nerror Fundraiser__DoesNotExist();\\nerror Fundraiser__Completed();\\n\\n/**\\n * @author Buildit Team\\n * @title Fundraiser\\n */\\ncontract Fundraiser is ERC721URIStorage {\\n    struct Campaign {\\n        uint256 currAmt;\\n        uint256 requiredAmt;\\n        bool completed;\\n    }\\n\\n    mapping(uint256 => Campaign) private s_idToCampaign;\\n    // NFT variables\\n    uint256 private s_tokenId;\\n    // Events\\n\\n    event StartCampaign(address indexed owner, uint256 indexed tokenId, uint256 requiredAmt);\\n    event ExtendCampaign(address indexed owner, uint256 indexed tokenId, uint256 extendAmt);\\n    event Donation(address indexed from, uint256 indexed tokenId, uint256 amount);\\n    event Withdraw(uint256 indexed tokenId, address indexed from, uint256 withdrawedAmt);\\n    event EndCampaign(uint256 indexed tokenId);\\n\\n    constructor() ERC721(\\\"Fundraiser Collection\\\", \\\"FRC\\\") {}\\n\\n    // Modifiers\\n    modifier onlyOwnerOfNFT(uint256 tokenId) {\\n        if (ownerOf(tokenId) != msg.sender) {\\n            revert Fundraiser__NotOwner();\\n        }\\n        _;\\n    }\\n    modifier notCompleted(uint256 tokenId) {\\n        if (s_idToCampaign[tokenId].completed) {\\n            revert Fundraiser__Completed();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * Starts a campaign\\n     * @param _tokenURI IPFS hash of metadata\\n     * @param _requiredAmt the total required amount\\n     * @dev mints a Fundraiser NFT with given metadata &\\n     * Stores requiredAmt to Struct mapped using tokenId\\n     */\\n    function startCampaign(string calldata _tokenURI, uint256 _requiredAmt) external {\\n        s_tokenId++;\\n        _safeMint(msg.sender, s_tokenId);\\n        _setTokenURI(s_tokenId, _tokenURI);\\n        s_idToCampaign[s_tokenId].requiredAmt = _requiredAmt;\\n        emit StartCampaign(msg.sender, s_tokenId, _requiredAmt);\\n    }\\n\\n    /**\\n     * Extends a campaign\\n     * @param tokenId used to identify token\\n     * @param extendAmt add extra amount to existing Campaign\\n     * @dev mints a Fundraiser NFT with given metadata &\\n     * Stores requiredAmt to Struct mapped using tokenId\\n     */\\n    function extendCampaign(uint256 tokenId, uint256 extendAmt)\\n        external\\n        notCompleted(tokenId)\\n        onlyOwnerOfNFT(tokenId)\\n    {\\n        s_idToCampaign[s_tokenId].requiredAmt += extendAmt;\\n        emit ExtendCampaign(msg.sender, tokenId, extendAmt);\\n    }\\n\\n    /**\\n     * Donate to a campaign\\n     * @param tokenId used to identify campaign\\n     * @dev adds up msg.value received to campaign\\n     */\\n    function donate(uint256 tokenId) external payable notCompleted(tokenId) {\\n        if (msg.value == 0) {\\n            revert Fundraiser__DonatedZero();\\n        }\\n        if (!_exists(tokenId)) {\\n            revert Fundraiser__DoesNotExist();\\n        }\\n        Campaign storage campaign = s_idToCampaign[tokenId];\\n        if (campaign.requiredAmt - campaign.currAmt < msg.value) {\\n            revert Fundraiser__OverPayment();\\n        }\\n        campaign.currAmt += msg.value;\\n        emit Donation(msg.sender, tokenId, msg.value);\\n    }\\n\\n    /**\\n     * Withdraw amount from campaign\\n     * @param tokenId used to identify campaign\\n     * @param amount specify amount to withdraw\\n     * @dev withdraw give amount,also reduce that from required & currAmt\\n     */\\n    function withdraw(uint256 tokenId, uint256 amount)\\n        external\\n        notCompleted(tokenId)\\n        onlyOwnerOfNFT(tokenId)\\n    {\\n        Campaign storage campaign = s_idToCampaign[tokenId];\\n        if (campaign.currAmt < amount) {\\n            revert Fundraiser__NotEnoughBalance();\\n        }\\n        campaign.currAmt -= amount;\\n        campaign.requiredAmt -= amount;\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Fundraiser__TransferFailed();\\n        }\\n        emit Withdraw(tokenId, msg.sender, amount);\\n    }\\n\\n    /**\\n     * end the campaign and withdraw all\\n     * @param tokenId used to identify campaign\\n     * @dev marks campaign as completed & sends amount to owner\\n     */\\n    function endCampaign(uint256 tokenId) external onlyOwnerOfNFT(tokenId) notCompleted(tokenId) {\\n        s_idToCampaign[tokenId].completed = true;\\n        (bool success, ) = msg.sender.call{value: s_idToCampaign[tokenId].currAmt}(\\\"\\\");\\n        if (!success) {\\n            revert Fundraiser__TransferFailed();\\n        }\\n        emit EndCampaign(tokenId);\\n    }\\n\\n    // Getter functions\\n    /**\\n     * get Campaign details\\n     * @param tokenId used to identify campaign\\n     * @dev identify Campaign from s_idToCampaign & return\\n     */\\n    function getCampaign(uint256 tokenId) external view returns (Campaign memory) {\\n        return s_idToCampaign[tokenId];\\n    }\\n\\n    /**\\n     * get last minted tokenId\\n     * @dev returns s_tokenId private variable\\n     */\\n    function getLastTokenId() external view returns (uint256) {\\n        return s_tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0xb34daa875fb9446193954b018fdc47243871992e3f86eba89dd72692417bea2c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280601581526020017f46756e6472616973657220436f6c6c656374696f6e00000000000000000000008152506040518060400160405280600381526020017f4652430000000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620000b8565b508060019080519060200190620000af929190620000b8565b505050620001cd565b828054620000c69062000197565b90600052602060002090601f016020900481019282620000ea576000855562000136565b82601f106200010557805160ff191683800117855562000136565b8280016001018555821562000136579182015b828111156200013557825182559160200191906001019062000118565b5b50905062000145919062000149565b5090565b5b80821115620001645760008160009055506001016200014a565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001b057607f821691505b60208210811415620001c757620001c662000168565b5b50919050565b6133fa80620001dd6000396000f3fe60806040526004361061011f5760003560e01c806370a08231116100a0578063c87b56dd11610064578063c87b56dd146103f5578063da356c7214610432578063dd0408ae1461045b578063e985e9c514610484578063f14faf6f146104c15761011f565b806370a082311461031057806383c4c00d1461034d57806395d89b4114610378578063a22cb465146103a3578063b88d4fde146103cc5761011f565b806342842e0e116100e757806342842e0e1461021b578063441a3e70146102445780635598f8cc1461026d5780636352211e146102aa5780636aeac029146102e75761011f565b806301ffc9a71461012457806306fdde0314610161578063081812fc1461018c578063095ea7b3146101c957806323b872dd146101f2575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190612306565b6104dd565b604051610158919061234e565b60405180910390f35b34801561016d57600080fd5b506101766105bf565b6040516101839190612402565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae919061245a565b610651565b6040516101c091906124c8565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb919061250f565b610697565b005b3480156101fe57600080fd5b506102196004803603810190610214919061254f565b6107af565b005b34801561022757600080fd5b50610242600480360381019061023d919061254f565b61080f565b005b34801561025057600080fd5b5061026b600480360381019061026691906125a2565b61082f565b005b34801561027957600080fd5b50610294600480360381019061028f919061245a565b610a7e565b6040516102a19190612642565b60405180910390f35b3480156102b657600080fd5b506102d160048036038101906102cc919061245a565b610ada565b6040516102de91906124c8565b60405180910390f35b3480156102f357600080fd5b5061030e600480360381019061030991906125a2565b610b8c565b005b34801561031c57600080fd5b506103376004803603810190610332919061265d565b610cda565b6040516103449190612699565b60405180910390f35b34801561035957600080fd5b50610362610d92565b60405161036f9190612699565b60405180910390f35b34801561038457600080fd5b5061038d610d9c565b60405161039a9190612402565b60405180910390f35b3480156103af57600080fd5b506103ca60048036038101906103c591906126e0565b610e2e565b005b3480156103d857600080fd5b506103f360048036038101906103ee9190612855565b610e44565b005b34801561040157600080fd5b5061041c6004803603810190610417919061245a565b610ea6565b6040516104299190612402565b60405180910390f35b34801561043e57600080fd5b5061045960048036038101906104549190612938565b610fb9565b005b34801561046757600080fd5b50610482600480360381019061047d919061245a565b6110a0565b005b34801561049057600080fd5b506104ab60048036038101906104a69190612998565b611285565b6040516104b8919061234e565b60405180910390f35b6104db60048036038101906104d6919061245a565b611319565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105a857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105b857506105b7826114c2565b5b9050919050565b6060600080546105ce90612a07565b80601f01602080910402602001604051908101604052809291908181526020018280546105fa90612a07565b80156106475780601f1061061c57610100808354040283529160200191610647565b820191906000526020600020905b81548152906001019060200180831161062a57829003601f168201915b5050505050905090565b600061065c8261152c565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106a282610ada565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610713576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070a90612aab565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610732611577565b73ffffffffffffffffffffffffffffffffffffffff16148061076157506107608161075b611577565b611285565b5b6107a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079790612b3d565b60405180910390fd5b6107aa838361157f565b505050565b6107c06107ba611577565b82611638565b6107ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f690612bcf565b60405180910390fd5b61080a8383836116cd565b505050565b61082a83838360405180602001604052806000815250610e44565b505050565b816007600082815260200190815260200160002060020160009054906101000a900460ff161561088b576040517f8a54cfde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166108ac82610ada565b73ffffffffffffffffffffffffffffffffffffffff16146108f9576040517fa6b8ee9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008681526020019081526020016000209050838160000154101561094e576040517f11428de200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838160000160008282546109629190612c1e565b925050819055508381600101600082825461097d9190612c1e565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff16856040516109aa90612c83565b60006040518083038185875af1925050503d80600081146109e7576040519150601f19603f3d011682016040523d82523d6000602084013e6109ec565b606091505b5050905080610a27576040517f13e9cf9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16867f9da6493a92039daf47d1f2d7a782299c5994c6323eb1e972f69c432089ec52bf87604051610a6e9190612699565b60405180910390a3505050505050565b610a866121d4565b6007600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7a90612ce4565b60405180910390fd5b80915050919050565b816007600082815260200190815260200160002060020160009054906101000a900460ff1615610be8576040517f8a54cfde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff16610c0982610ada565b73ffffffffffffffffffffffffffffffffffffffff1614610c56576040517fa6b8ee9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826007600060085481526020019081526020016000206001016000828254610c7e9190612d04565b92505081905550833373ffffffffffffffffffffffffffffffffffffffff167fb9f80ad3df80ef01388eea216d311da0237d703429a3e8018f1854134c7003c385604051610ccc9190612699565b60405180910390a350505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4290612dcc565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600854905090565b606060018054610dab90612a07565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd790612a07565b8015610e245780601f10610df957610100808354040283529160200191610e24565b820191906000526020600020905b815481529060010190602001808311610e0757829003601f168201915b5050505050905090565b610e40610e39611577565b8383611934565b5050565b610e55610e4f611577565b83611638565b610e94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8b90612bcf565b60405180910390fd5b610ea084848484611aa1565b50505050565b6060610eb18261152c565b6000600660008481526020019081526020016000208054610ed190612a07565b80601f0160208091040260200160405190810160405280929190818152602001828054610efd90612a07565b8015610f4a5780601f10610f1f57610100808354040283529160200191610f4a565b820191906000526020600020905b815481529060010190602001808311610f2d57829003601f168201915b505050505090506000610f5b611afd565b9050600081511415610f71578192505050610fb4565b600082511115610fa6578082604051602001610f8e929190612e28565b60405160208183030381529060405292505050610fb4565b610faf84611b14565b925050505b919050565b60086000815480929190610fcc90612e4c565b9190505550610fdd33600854611b7c565b61102d60085484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611b9a565b80600760006008548152602001908152602001600020600101819055506008543373ffffffffffffffffffffffffffffffffffffffff167f6c3d2bd63ded3a40f4a1c835f570ec623cb9b219e164841cbedfb74d986c292b836040516110939190612699565b60405180910390a3505050565b803373ffffffffffffffffffffffffffffffffffffffff166110c182610ada565b73ffffffffffffffffffffffffffffffffffffffff161461110e576040517fa6b8ee9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816007600082815260200190815260200160002060020160009054906101000a900460ff161561116a576040517f8a54cfde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016007600085815260200190815260200160002060020160006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff1660076000868152602001908152602001600020600001546040516111d590612c83565b60006040518083038185875af1925050503d8060008114611212576040519150601f19603f3d011682016040523d82523d6000602084013e611217565b606091505b5050905080611252576040517f13e9cf9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b837fabe114b53dd5fb550b3995d0a6366071f72e7d7853f5a3f9eb418defcbb643ec60405160405180910390a250505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b806007600082815260200190815260200160002060020160009054906101000a900460ff1615611375576040517f8a54cfde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003414156113b0576040517f4002f95800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113b982611c0e565b6113ef576040517f90e6ca3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008481526020019081526020016000209050348160000154826001015461141b9190612c1e565b1015611453576040517fb5d3019d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b348160000160008282546114679190612d04565b92505081905550823373ffffffffffffffffffffffffffffffffffffffff167f106aac375bbcf013d1e52338bbf9e740009a1a3a6869f8daa1b72aa1620f5fec346040516114b59190612699565b60405180910390a3505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61153581611c0e565b611574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156b90612ce4565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166115f283610ada565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061164483610ada565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061168657506116858185611285565b5b806116c457508373ffffffffffffffffffffffffffffffffffffffff166116ac84610651565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166116ed82610ada565b73ffffffffffffffffffffffffffffffffffffffff1614611743576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173a90612f07565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117aa90612f99565b60405180910390fd5b6117be838383611c7a565b6117c960008261157f565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118199190612c1e565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118709190612d04565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461192f838383611c7f565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156119a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199a90613005565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611a94919061234e565b60405180910390a3505050565b611aac8484846116cd565b611ab884848484611c84565b611af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aee90613097565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611b1f8261152c565b6000611b29611afd565b90506000815111611b495760405180602001604052806000815250611b74565b80611b5384611e1b565b604051602001611b64929190612e28565b6040516020818303038152906040525b915050919050565b611b96828260405180602001604052806000815250611f7c565b5050565b611ba382611c0e565b611be2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd990613129565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611c099291906121f7565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6000611ca58473ffffffffffffffffffffffffffffffffffffffff16611fd7565b15611e0e578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611cce611577565b8786866040518563ffffffff1660e01b8152600401611cf0949392919061319e565b602060405180830381600087803b158015611d0a57600080fd5b505af1925050508015611d3b57506040513d601f19601f82011682018060405250810190611d3891906131ff565b60015b611dbe573d8060008114611d6b576040519150601f19603f3d011682016040523d82523d6000602084013e611d70565b606091505b50600081511415611db6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dad90613097565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611e13565b600190505b949350505050565b60606000821415611e63576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611f77565b600082905060005b60008214611e95578080611e7e90612e4c565b915050600a82611e8e919061325b565b9150611e6b565b60008167ffffffffffffffff811115611eb157611eb061272a565b5b6040519080825280601f01601f191660200182016040528015611ee35781602001600182028036833780820191505090505b5090505b60008514611f7057600182611efc9190612c1e565b9150600a85611f0b919061328c565b6030611f179190612d04565b60f81b818381518110611f2d57611f2c6132bd565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611f69919061325b565b9450611ee7565b8093505050505b919050565b611f868383611ffa565b611f936000848484611c84565b611fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc990613097565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561206a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206190613338565b60405180910390fd5b61207381611c0e565b156120b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120aa906133a4565b60405180910390fd5b6120bf60008383611c7a565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461210f9190612d04565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46121d060008383611c7f565b5050565b604051806060016040528060008152602001600081526020016000151581525090565b82805461220390612a07565b90600052602060002090601f016020900481019282612225576000855561226c565b82601f1061223e57805160ff191683800117855561226c565b8280016001018555821561226c579182015b8281111561226b578251825591602001919060010190612250565b5b509050612279919061227d565b5090565b5b8082111561229657600081600090555060010161227e565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6122e3816122ae565b81146122ee57600080fd5b50565b600081359050612300816122da565b92915050565b60006020828403121561231c5761231b6122a4565b5b600061232a848285016122f1565b91505092915050565b60008115159050919050565b61234881612333565b82525050565b6000602082019050612363600083018461233f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123a3578082015181840152602081019050612388565b838111156123b2576000848401525b50505050565b6000601f19601f8301169050919050565b60006123d482612369565b6123de8185612374565b93506123ee818560208601612385565b6123f7816123b8565b840191505092915050565b6000602082019050818103600083015261241c81846123c9565b905092915050565b6000819050919050565b61243781612424565b811461244257600080fd5b50565b6000813590506124548161242e565b92915050565b6000602082840312156124705761246f6122a4565b5b600061247e84828501612445565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124b282612487565b9050919050565b6124c2816124a7565b82525050565b60006020820190506124dd60008301846124b9565b92915050565b6124ec816124a7565b81146124f757600080fd5b50565b600081359050612509816124e3565b92915050565b60008060408385031215612526576125256122a4565b5b6000612534858286016124fa565b925050602061254585828601612445565b9150509250929050565b600080600060608486031215612568576125676122a4565b5b6000612576868287016124fa565b9350506020612587868287016124fa565b925050604061259886828701612445565b9150509250925092565b600080604083850312156125b9576125b86122a4565b5b60006125c785828601612445565b92505060206125d885828601612445565b9150509250929050565b6125eb81612424565b82525050565b6125fa81612333565b82525050565b60608201600082015161261660008501826125e2565b50602082015161262960208501826125e2565b50604082015161263c60408501826125f1565b50505050565b60006060820190506126576000830184612600565b92915050565b600060208284031215612673576126726122a4565b5b6000612681848285016124fa565b91505092915050565b61269381612424565b82525050565b60006020820190506126ae600083018461268a565b92915050565b6126bd81612333565b81146126c857600080fd5b50565b6000813590506126da816126b4565b92915050565b600080604083850312156126f7576126f66122a4565b5b6000612705858286016124fa565b9250506020612716858286016126cb565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612762826123b8565b810181811067ffffffffffffffff821117156127815761278061272a565b5b80604052505050565b600061279461229a565b90506127a08282612759565b919050565b600067ffffffffffffffff8211156127c0576127bf61272a565b5b6127c9826123b8565b9050602081019050919050565b82818337600083830152505050565b60006127f86127f3846127a5565b61278a565b90508281526020810184848401111561281457612813612725565b5b61281f8482856127d6565b509392505050565b600082601f83011261283c5761283b612720565b5b813561284c8482602086016127e5565b91505092915050565b6000806000806080858703121561286f5761286e6122a4565b5b600061287d878288016124fa565b945050602061288e878288016124fa565b935050604061289f87828801612445565b925050606085013567ffffffffffffffff8111156128c0576128bf6122a9565b5b6128cc87828801612827565b91505092959194509250565b600080fd5b600080fd5b60008083601f8401126128f8576128f7612720565b5b8235905067ffffffffffffffff811115612915576129146128d8565b5b602083019150836001820283011115612931576129306128dd565b5b9250929050565b600080600060408486031215612951576129506122a4565b5b600084013567ffffffffffffffff81111561296f5761296e6122a9565b5b61297b868287016128e2565b9350935050602061298e86828701612445565b9150509250925092565b600080604083850312156129af576129ae6122a4565b5b60006129bd858286016124fa565b92505060206129ce858286016124fa565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612a1f57607f821691505b60208210811415612a3357612a326129d8565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a95602183612374565b9150612aa082612a39565b604082019050919050565b60006020820190508181036000830152612ac481612a88565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612b27603e83612374565b9150612b3282612acb565b604082019050919050565b60006020820190508181036000830152612b5681612b1a565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612bb9602e83612374565b9150612bc482612b5d565b604082019050919050565b60006020820190508181036000830152612be881612bac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c2982612424565b9150612c3483612424565b925082821015612c4757612c46612bef565b5b828203905092915050565b600081905092915050565b50565b6000612c6d600083612c52565b9150612c7882612c5d565b600082019050919050565b6000612c8e82612c60565b9150819050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612cce601883612374565b9150612cd982612c98565b602082019050919050565b60006020820190508181036000830152612cfd81612cc1565b9050919050565b6000612d0f82612424565b9150612d1a83612424565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612d4f57612d4e612bef565b5b828201905092915050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612db6602983612374565b9150612dc182612d5a565b604082019050919050565b60006020820190508181036000830152612de581612da9565b9050919050565b600081905092915050565b6000612e0282612369565b612e0c8185612dec565b9350612e1c818560208601612385565b80840191505092915050565b6000612e348285612df7565b9150612e408284612df7565b91508190509392505050565b6000612e5782612424565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e8a57612e89612bef565b5b600182019050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612ef1602583612374565b9150612efc82612e95565b604082019050919050565b60006020820190508181036000830152612f2081612ee4565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612f83602483612374565b9150612f8e82612f27565b604082019050919050565b60006020820190508181036000830152612fb281612f76565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612fef601983612374565b9150612ffa82612fb9565b602082019050919050565b6000602082019050818103600083015261301e81612fe2565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613081603283612374565b915061308c82613025565b604082019050919050565b600060208201905081810360008301526130b081613074565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613113602e83612374565b915061311e826130b7565b604082019050919050565b6000602082019050818103600083015261314281613106565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061317082613149565b61317a8185613154565b935061318a818560208601612385565b613193816123b8565b840191505092915050565b60006080820190506131b360008301876124b9565b6131c060208301866124b9565b6131cd604083018561268a565b81810360608301526131df8184613165565b905095945050505050565b6000815190506131f9816122da565b92915050565b600060208284031215613215576132146122a4565b5b6000613223848285016131ea565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061326682612424565b915061327183612424565b9250826132815761328061322c565b5b828204905092915050565b600061329782612424565b91506132a283612424565b9250826132b2576132b161322c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613322602083612374565b915061332d826132ec565b602082019050919050565b6000602082019050818103600083015261335181613315565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061338e601c83612374565b915061339982613358565b602082019050919050565b600060208201905081810360008301526133bd81613381565b905091905056fea264697066735822122029c127d1fd6051aa42e4fcbe58945322424db3cfb4172ce7c6a733a573418fb864736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c806370a08231116100a0578063c87b56dd11610064578063c87b56dd146103f5578063da356c7214610432578063dd0408ae1461045b578063e985e9c514610484578063f14faf6f146104c15761011f565b806370a082311461031057806383c4c00d1461034d57806395d89b4114610378578063a22cb465146103a3578063b88d4fde146103cc5761011f565b806342842e0e116100e757806342842e0e1461021b578063441a3e70146102445780635598f8cc1461026d5780636352211e146102aa5780636aeac029146102e75761011f565b806301ffc9a71461012457806306fdde0314610161578063081812fc1461018c578063095ea7b3146101c957806323b872dd146101f2575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190612306565b6104dd565b604051610158919061234e565b60405180910390f35b34801561016d57600080fd5b506101766105bf565b6040516101839190612402565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae919061245a565b610651565b6040516101c091906124c8565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb919061250f565b610697565b005b3480156101fe57600080fd5b506102196004803603810190610214919061254f565b6107af565b005b34801561022757600080fd5b50610242600480360381019061023d919061254f565b61080f565b005b34801561025057600080fd5b5061026b600480360381019061026691906125a2565b61082f565b005b34801561027957600080fd5b50610294600480360381019061028f919061245a565b610a7e565b6040516102a19190612642565b60405180910390f35b3480156102b657600080fd5b506102d160048036038101906102cc919061245a565b610ada565b6040516102de91906124c8565b60405180910390f35b3480156102f357600080fd5b5061030e600480360381019061030991906125a2565b610b8c565b005b34801561031c57600080fd5b506103376004803603810190610332919061265d565b610cda565b6040516103449190612699565b60405180910390f35b34801561035957600080fd5b50610362610d92565b60405161036f9190612699565b60405180910390f35b34801561038457600080fd5b5061038d610d9c565b60405161039a9190612402565b60405180910390f35b3480156103af57600080fd5b506103ca60048036038101906103c591906126e0565b610e2e565b005b3480156103d857600080fd5b506103f360048036038101906103ee9190612855565b610e44565b005b34801561040157600080fd5b5061041c6004803603810190610417919061245a565b610ea6565b6040516104299190612402565b60405180910390f35b34801561043e57600080fd5b5061045960048036038101906104549190612938565b610fb9565b005b34801561046757600080fd5b50610482600480360381019061047d919061245a565b6110a0565b005b34801561049057600080fd5b506104ab60048036038101906104a69190612998565b611285565b6040516104b8919061234e565b60405180910390f35b6104db60048036038101906104d6919061245a565b611319565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105a857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105b857506105b7826114c2565b5b9050919050565b6060600080546105ce90612a07565b80601f01602080910402602001604051908101604052809291908181526020018280546105fa90612a07565b80156106475780601f1061061c57610100808354040283529160200191610647565b820191906000526020600020905b81548152906001019060200180831161062a57829003601f168201915b5050505050905090565b600061065c8261152c565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106a282610ada565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610713576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070a90612aab565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610732611577565b73ffffffffffffffffffffffffffffffffffffffff16148061076157506107608161075b611577565b611285565b5b6107a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079790612b3d565b60405180910390fd5b6107aa838361157f565b505050565b6107c06107ba611577565b82611638565b6107ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f690612bcf565b60405180910390fd5b61080a8383836116cd565b505050565b61082a83838360405180602001604052806000815250610e44565b505050565b816007600082815260200190815260200160002060020160009054906101000a900460ff161561088b576040517f8a54cfde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166108ac82610ada565b73ffffffffffffffffffffffffffffffffffffffff16146108f9576040517fa6b8ee9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008681526020019081526020016000209050838160000154101561094e576040517f11428de200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838160000160008282546109629190612c1e565b925050819055508381600101600082825461097d9190612c1e565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff16856040516109aa90612c83565b60006040518083038185875af1925050503d80600081146109e7576040519150601f19603f3d011682016040523d82523d6000602084013e6109ec565b606091505b5050905080610a27576040517f13e9cf9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16867f9da6493a92039daf47d1f2d7a782299c5994c6323eb1e972f69c432089ec52bf87604051610a6e9190612699565b60405180910390a3505050505050565b610a866121d4565b6007600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7a90612ce4565b60405180910390fd5b80915050919050565b816007600082815260200190815260200160002060020160009054906101000a900460ff1615610be8576040517f8a54cfde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff16610c0982610ada565b73ffffffffffffffffffffffffffffffffffffffff1614610c56576040517fa6b8ee9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826007600060085481526020019081526020016000206001016000828254610c7e9190612d04565b92505081905550833373ffffffffffffffffffffffffffffffffffffffff167fb9f80ad3df80ef01388eea216d311da0237d703429a3e8018f1854134c7003c385604051610ccc9190612699565b60405180910390a350505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4290612dcc565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600854905090565b606060018054610dab90612a07565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd790612a07565b8015610e245780601f10610df957610100808354040283529160200191610e24565b820191906000526020600020905b815481529060010190602001808311610e0757829003601f168201915b5050505050905090565b610e40610e39611577565b8383611934565b5050565b610e55610e4f611577565b83611638565b610e94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8b90612bcf565b60405180910390fd5b610ea084848484611aa1565b50505050565b6060610eb18261152c565b6000600660008481526020019081526020016000208054610ed190612a07565b80601f0160208091040260200160405190810160405280929190818152602001828054610efd90612a07565b8015610f4a5780601f10610f1f57610100808354040283529160200191610f4a565b820191906000526020600020905b815481529060010190602001808311610f2d57829003601f168201915b505050505090506000610f5b611afd565b9050600081511415610f71578192505050610fb4565b600082511115610fa6578082604051602001610f8e929190612e28565b60405160208183030381529060405292505050610fb4565b610faf84611b14565b925050505b919050565b60086000815480929190610fcc90612e4c565b9190505550610fdd33600854611b7c565b61102d60085484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611b9a565b80600760006008548152602001908152602001600020600101819055506008543373ffffffffffffffffffffffffffffffffffffffff167f6c3d2bd63ded3a40f4a1c835f570ec623cb9b219e164841cbedfb74d986c292b836040516110939190612699565b60405180910390a3505050565b803373ffffffffffffffffffffffffffffffffffffffff166110c182610ada565b73ffffffffffffffffffffffffffffffffffffffff161461110e576040517fa6b8ee9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816007600082815260200190815260200160002060020160009054906101000a900460ff161561116a576040517f8a54cfde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016007600085815260200190815260200160002060020160006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff1660076000868152602001908152602001600020600001546040516111d590612c83565b60006040518083038185875af1925050503d8060008114611212576040519150601f19603f3d011682016040523d82523d6000602084013e611217565b606091505b5050905080611252576040517f13e9cf9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b837fabe114b53dd5fb550b3995d0a6366071f72e7d7853f5a3f9eb418defcbb643ec60405160405180910390a250505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b806007600082815260200190815260200160002060020160009054906101000a900460ff1615611375576040517f8a54cfde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003414156113b0576040517f4002f95800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113b982611c0e565b6113ef576040517f90e6ca3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008481526020019081526020016000209050348160000154826001015461141b9190612c1e565b1015611453576040517fb5d3019d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b348160000160008282546114679190612d04565b92505081905550823373ffffffffffffffffffffffffffffffffffffffff167f106aac375bbcf013d1e52338bbf9e740009a1a3a6869f8daa1b72aa1620f5fec346040516114b59190612699565b60405180910390a3505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61153581611c0e565b611574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156b90612ce4565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166115f283610ada565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061164483610ada565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061168657506116858185611285565b5b806116c457508373ffffffffffffffffffffffffffffffffffffffff166116ac84610651565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166116ed82610ada565b73ffffffffffffffffffffffffffffffffffffffff1614611743576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173a90612f07565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117aa90612f99565b60405180910390fd5b6117be838383611c7a565b6117c960008261157f565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118199190612c1e565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118709190612d04565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461192f838383611c7f565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156119a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199a90613005565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611a94919061234e565b60405180910390a3505050565b611aac8484846116cd565b611ab884848484611c84565b611af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aee90613097565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611b1f8261152c565b6000611b29611afd565b90506000815111611b495760405180602001604052806000815250611b74565b80611b5384611e1b565b604051602001611b64929190612e28565b6040516020818303038152906040525b915050919050565b611b96828260405180602001604052806000815250611f7c565b5050565b611ba382611c0e565b611be2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd990613129565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611c099291906121f7565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6000611ca58473ffffffffffffffffffffffffffffffffffffffff16611fd7565b15611e0e578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611cce611577565b8786866040518563ffffffff1660e01b8152600401611cf0949392919061319e565b602060405180830381600087803b158015611d0a57600080fd5b505af1925050508015611d3b57506040513d601f19601f82011682018060405250810190611d3891906131ff565b60015b611dbe573d8060008114611d6b576040519150601f19603f3d011682016040523d82523d6000602084013e611d70565b606091505b50600081511415611db6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dad90613097565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611e13565b600190505b949350505050565b60606000821415611e63576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611f77565b600082905060005b60008214611e95578080611e7e90612e4c565b915050600a82611e8e919061325b565b9150611e6b565b60008167ffffffffffffffff811115611eb157611eb061272a565b5b6040519080825280601f01601f191660200182016040528015611ee35781602001600182028036833780820191505090505b5090505b60008514611f7057600182611efc9190612c1e565b9150600a85611f0b919061328c565b6030611f179190612d04565b60f81b818381518110611f2d57611f2c6132bd565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611f69919061325b565b9450611ee7565b8093505050505b919050565b611f868383611ffa565b611f936000848484611c84565b611fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc990613097565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561206a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206190613338565b60405180910390fd5b61207381611c0e565b156120b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120aa906133a4565b60405180910390fd5b6120bf60008383611c7a565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461210f9190612d04565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46121d060008383611c7f565b5050565b604051806060016040528060008152602001600081526020016000151581525090565b82805461220390612a07565b90600052602060002090601f016020900481019282612225576000855561226c565b82601f1061223e57805160ff191683800117855561226c565b8280016001018555821561226c579182015b8281111561226b578251825591602001919060010190612250565b5b509050612279919061227d565b5090565b5b8082111561229657600081600090555060010161227e565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6122e3816122ae565b81146122ee57600080fd5b50565b600081359050612300816122da565b92915050565b60006020828403121561231c5761231b6122a4565b5b600061232a848285016122f1565b91505092915050565b60008115159050919050565b61234881612333565b82525050565b6000602082019050612363600083018461233f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123a3578082015181840152602081019050612388565b838111156123b2576000848401525b50505050565b6000601f19601f8301169050919050565b60006123d482612369565b6123de8185612374565b93506123ee818560208601612385565b6123f7816123b8565b840191505092915050565b6000602082019050818103600083015261241c81846123c9565b905092915050565b6000819050919050565b61243781612424565b811461244257600080fd5b50565b6000813590506124548161242e565b92915050565b6000602082840312156124705761246f6122a4565b5b600061247e84828501612445565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124b282612487565b9050919050565b6124c2816124a7565b82525050565b60006020820190506124dd60008301846124b9565b92915050565b6124ec816124a7565b81146124f757600080fd5b50565b600081359050612509816124e3565b92915050565b60008060408385031215612526576125256122a4565b5b6000612534858286016124fa565b925050602061254585828601612445565b9150509250929050565b600080600060608486031215612568576125676122a4565b5b6000612576868287016124fa565b9350506020612587868287016124fa565b925050604061259886828701612445565b9150509250925092565b600080604083850312156125b9576125b86122a4565b5b60006125c785828601612445565b92505060206125d885828601612445565b9150509250929050565b6125eb81612424565b82525050565b6125fa81612333565b82525050565b60608201600082015161261660008501826125e2565b50602082015161262960208501826125e2565b50604082015161263c60408501826125f1565b50505050565b60006060820190506126576000830184612600565b92915050565b600060208284031215612673576126726122a4565b5b6000612681848285016124fa565b91505092915050565b61269381612424565b82525050565b60006020820190506126ae600083018461268a565b92915050565b6126bd81612333565b81146126c857600080fd5b50565b6000813590506126da816126b4565b92915050565b600080604083850312156126f7576126f66122a4565b5b6000612705858286016124fa565b9250506020612716858286016126cb565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612762826123b8565b810181811067ffffffffffffffff821117156127815761278061272a565b5b80604052505050565b600061279461229a565b90506127a08282612759565b919050565b600067ffffffffffffffff8211156127c0576127bf61272a565b5b6127c9826123b8565b9050602081019050919050565b82818337600083830152505050565b60006127f86127f3846127a5565b61278a565b90508281526020810184848401111561281457612813612725565b5b61281f8482856127d6565b509392505050565b600082601f83011261283c5761283b612720565b5b813561284c8482602086016127e5565b91505092915050565b6000806000806080858703121561286f5761286e6122a4565b5b600061287d878288016124fa565b945050602061288e878288016124fa565b935050604061289f87828801612445565b925050606085013567ffffffffffffffff8111156128c0576128bf6122a9565b5b6128cc87828801612827565b91505092959194509250565b600080fd5b600080fd5b60008083601f8401126128f8576128f7612720565b5b8235905067ffffffffffffffff811115612915576129146128d8565b5b602083019150836001820283011115612931576129306128dd565b5b9250929050565b600080600060408486031215612951576129506122a4565b5b600084013567ffffffffffffffff81111561296f5761296e6122a9565b5b61297b868287016128e2565b9350935050602061298e86828701612445565b9150509250925092565b600080604083850312156129af576129ae6122a4565b5b60006129bd858286016124fa565b92505060206129ce858286016124fa565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612a1f57607f821691505b60208210811415612a3357612a326129d8565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a95602183612374565b9150612aa082612a39565b604082019050919050565b60006020820190508181036000830152612ac481612a88565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612b27603e83612374565b9150612b3282612acb565b604082019050919050565b60006020820190508181036000830152612b5681612b1a565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612bb9602e83612374565b9150612bc482612b5d565b604082019050919050565b60006020820190508181036000830152612be881612bac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c2982612424565b9150612c3483612424565b925082821015612c4757612c46612bef565b5b828203905092915050565b600081905092915050565b50565b6000612c6d600083612c52565b9150612c7882612c5d565b600082019050919050565b6000612c8e82612c60565b9150819050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612cce601883612374565b9150612cd982612c98565b602082019050919050565b60006020820190508181036000830152612cfd81612cc1565b9050919050565b6000612d0f82612424565b9150612d1a83612424565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612d4f57612d4e612bef565b5b828201905092915050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612db6602983612374565b9150612dc182612d5a565b604082019050919050565b60006020820190508181036000830152612de581612da9565b9050919050565b600081905092915050565b6000612e0282612369565b612e0c8185612dec565b9350612e1c818560208601612385565b80840191505092915050565b6000612e348285612df7565b9150612e408284612df7565b91508190509392505050565b6000612e5782612424565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e8a57612e89612bef565b5b600182019050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612ef1602583612374565b9150612efc82612e95565b604082019050919050565b60006020820190508181036000830152612f2081612ee4565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612f83602483612374565b9150612f8e82612f27565b604082019050919050565b60006020820190508181036000830152612fb281612f76565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612fef601983612374565b9150612ffa82612fb9565b602082019050919050565b6000602082019050818103600083015261301e81612fe2565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613081603283612374565b915061308c82613025565b604082019050919050565b600060208201905081810360008301526130b081613074565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613113602e83612374565b915061311e826130b7565b604082019050919050565b6000602082019050818103600083015261314281613106565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061317082613149565b61317a8185613154565b935061318a818560208601612385565b613193816123b8565b840191505092915050565b60006080820190506131b360008301876124b9565b6131c060208301866124b9565b6131cd604083018561268a565b81810360608301526131df8184613165565b905095945050505050565b6000815190506131f9816122da565b92915050565b600060208284031215613215576132146122a4565b5b6000613223848285016131ea565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061326682612424565b915061327183612424565b9250826132815761328061322c565b5b828204905092915050565b600061329782612424565b91506132a283612424565b9250826132b2576132b161322c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613322602083612374565b915061332d826132ec565b602082019050919050565b6000602082019050818103600083015261335181613315565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061338e601c83612374565b915061339982613358565b602082019050919050565b600060208201905081810360008301526133bd81613381565b905091905056fea264697066735822122029c127d1fd6051aa42e4fcbe58945322424db3cfb4172ce7c6a733a573418fb864736f6c63430008090033",
  "devdoc": {
    "author": "Buildit Team",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "donate(uint256)": {
        "details": "adds up msg.value received to campaign",
        "params": {
          "tokenId": "used to identify campaign"
        }
      },
      "endCampaign(uint256)": {
        "details": "marks campaign as completed & sends amount to owner",
        "params": {
          "tokenId": "used to identify campaign"
        }
      },
      "extendCampaign(uint256,uint256)": {
        "details": "mints a Fundraiser NFT with given metadata & Stores requiredAmt to Struct mapped using tokenId",
        "params": {
          "extendAmt": "add extra amount to existing Campaign",
          "tokenId": "used to identify token"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getCampaign(uint256)": {
        "details": "identify Campaign from s_idToCampaign & return",
        "params": {
          "tokenId": "used to identify campaign"
        }
      },
      "getLastTokenId()": {
        "details": "returns s_tokenId private variable"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "startCampaign(string,uint256)": {
        "details": "mints a Fundraiser NFT with given metadata & Stores requiredAmt to Struct mapped using tokenId",
        "params": {
          "_requiredAmt": "the total required amount",
          "_tokenURI": "IPFS hash of metadata"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "withdraw(uint256,uint256)": {
        "details": "withdraw give amount,also reduce that from required & currAmt",
        "params": {
          "amount": "specify amount to withdraw",
          "tokenId": "used to identify campaign"
        }
      }
    },
    "title": "Fundraiser",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "donate(uint256)": {
        "notice": "Donate to a campaign"
      },
      "endCampaign(uint256)": {
        "notice": "end the campaign and withdraw all"
      },
      "extendCampaign(uint256,uint256)": {
        "notice": "Extends a campaign"
      },
      "getCampaign(uint256)": {
        "notice": "get Campaign details"
      },
      "getLastTokenId()": {
        "notice": "get last minted tokenId"
      },
      "startCampaign(string,uint256)": {
        "notice": "Starts a campaign"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw amount from campaign"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/Fundraiser.sol:Fundraiser",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/Fundraiser.sol:Fundraiser",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/Fundraiser.sol:Fundraiser",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/Fundraiser.sol:Fundraiser",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/Fundraiser.sol:Fundraiser",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/Fundraiser.sol:Fundraiser",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1013,
        "contract": "contracts/Fundraiser.sol:Fundraiser",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1763,
        "contract": "contracts/Fundraiser.sol:Fundraiser",
        "label": "s_idToCampaign",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Campaign)1758_storage)"
      },
      {
        "astId": 1765,
        "contract": "contracts/Fundraiser.sol:Fundraiser",
        "label": "s_tokenId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Campaign)1758_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Fundraiser.Campaign)",
        "numberOfBytes": "32",
        "value": "t_struct(Campaign)1758_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Campaign)1758_storage": {
        "encoding": "inplace",
        "label": "struct Fundraiser.Campaign",
        "members": [
          {
            "astId": 1753,
            "contract": "contracts/Fundraiser.sol:Fundraiser",
            "label": "currAmt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1755,
            "contract": "contracts/Fundraiser.sol:Fundraiser",
            "label": "requiredAmt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1757,
            "contract": "contracts/Fundraiser.sol:Fundraiser",
            "label": "completed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}